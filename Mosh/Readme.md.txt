1. What is Docker?
A: Docker is a platform for running, building and shipping application.

2. Why an applications work on your machine but doesn't elsewhere/ Need for Docker?
A:  a. Missing one or more files
    b. Software version mismatch. The software which it's dependent on is of different version.
    c. Different configuration settings.

3. How does docker do?
a: With docker we package the application with all that it needs and run it anywhere.

4. Container vs Virtual machine
A:  Container- An isolated environment for running an app.
    Virtual machine- An abstraction of a machine (physical hardware).

5. Problems with virtual machine?
A:  a. Each virtual machine needs a full-blown OS
    b. Slow to start
    c. Resource intensive

6. Containers
A:  a. Allow multiple apps in isolation
    b. Are lightweight
    c. Use OS of the host
    d. Start quickly
    d. Needs less hardware resources

7. Docker Archtecture
A: Docker works on client server architecture. The client is connected and talks to the server component by Rest API and the server is known as "Docker Engine".
Docker Engine sits in the bacjground and takes care of buildingand running containers.
Container do't use full-blown OS instead they all the containers of the host share the OS. Infact, all containers share the kernel of the host.

8. Kernel
A: A kernel manages the application and hardware resources.

9. Docker Image: (Google write more appropriate answer)
A:  Contains:
    a. A cut-down OS
    b. A runtime environment
    c. Application files
    d. Third-party libraries
    e. Environment variables

10. Container:
    A container is a process. But is it a special kind of process which has its own filesystem.

6. docker images
    or (alternate command)
    docker image ls
    lists all the images

7. docker version
    displays the docker version

LINUX

11. Linux is an opensource OS

2. Using ubuntu on docker:
a. Instead of using docker pull ubuntu the shortcut can be:
    docker run ubuntu
    (If the image exists then it will simply run but if it doesn't exixts, it will pull and run)

3. docker ps
    checks all the docker process it is running (running container is a process)

4. docker ps -a
    displays all the containers even if it is stopped 

6. docker run <docker_image_name>
    runs a container. 

7. If you start a container and if it is not in interactie mode. It will stopped

8. If you don't want it to stop, keep it in interactive mode. To put it in interactie mode, use the flag "-it"

5. docker run -it ubuntu
    runs a container in interactive mode.

---------------------
Henceforth, lesson-wise
lesson12- Linux Distributions
1. Linux is an opensource OS

2. Linux comes with a lot of Distributions

3. Eg.,
    a. ubuntu
    b. Debian
    c. Alpine
    d. CentOS

lesson13 - Running Linux

1. To use Linuxs' particular OS say ubuntu we can type 
    docker pull ubuntu
    -pulls the ubuntu image

    or instead of using pull, we can use:
    docker run ubuntu
    -runs the ubuntu container but if it's not available, it will download it and runs

2. Although we have downloaded the container and run it, since we didn't interact with it, it stopped.
    -so if we do not interact with a container, it will stop

    To check we can write:
    docker ps 
    (to check the running processes, since a container is a process)
    We will find nothing
    But when we write:
    docker ps -a
    checks all the process, even if they have stopped
3. To start a container and interact with it:
    docker run -it <container_name>
    docker run -it ubuntu
    -starts a container in interaction mode.
    -this will open a shell prompt

4. Linux is a case sensitive OS

5. You can using up and down arrow keys to navigate between the commands

6. A shell prompt typically looks something like this:
    root@1a2345:/#
    Here is a breakdown of the above shell command:
    a. root - means the user, if you login with a differet user you will get a the user's name
    b. 1a2345 - means the machine ID. This ID is generated by the docker
    c. / - means where we are in the filesystem. A forward slash represents the root directory.
    d. # - means the privileges. A hash denotes that we have the highest privileges as the root user. If we login as a normal user, we will get a $ instaead of #

7. To list down all the commands entered:
    histroy
    - lists down all the commands in a serial order.
    - to execute the commands from the list type below:
    !<command serial> (exclaimation mark and the serial)
    !2
    - execute the 2nd command in the serial

lesson14 - Managing Packages

8. A Linux package manager is a tool that helps you easily install, update,
    and remove software. In ubuntu we have apt. 
    apt stands of Advanced Package Tool
    If you type:
    apt
    - list sub-commands, like list, install, remove, search, etc.,

    Suppose we want to install nano. If we type nano, we get nothing because it has not been installed currenty.
    To to install it we type:
    apt install nano
    - it might still not get installed, because we might not have the nano in the database of the ubuntu image.
    You can list the all the packages that are there in this OS bu typing:
    apt list
    -lists all the packages. Some packages may be installed while others might not be installed.
    So, we update the db of the packages by typing:
    apt update
    -updates the dbs of the packages
    and now when we type:
    apt list
    - more packages will get displayed
    Now, we  can install nano by typing:
    apt install nano
    - installs nano

    Take Away: 
    So, before installing any package, make sure you have updated the package db

9. To remove any package:
    apt remove nano
    -uninstalls the package

lesson 16 - Linux filesystem

1. In linux, we have the root directory on top which is represented as "/".
    below that we have some standard directories:

    /
    bin
    boot
    dev
    etc
    home
    root
    lib
    var
    proc

    Just a brief explaination:
    
    /    - root
    bin  - cotains mainly binary files or programmes
    boot - contains files related to booting
    dev  - short for devices (Yes, in linux everything is a file, including directories)
    etc  - General belief is it stands of Editable Text Config (configuration files)
    home - This is where homes dirctories of users are stored. Each user is going to have a home directory here.
    root - root directory for the root user. Only the root user will be able to see this
    lib  - used for keeping library files like software library dependencies 
    var  - stands for variable. This is where files are updated frequently like log files, application data, etc.
    proc - contains files represent running processes. (Yes, even processes are files in linux)
    
lesson16: Navigating the File System

Relative Path vs Absolute Path:

Relative path: Starts with "./" or "../", navigates relative to your 
    current location. Like giving directions.
    Example: ./report.pdf (This file is in the current directory)
    Example: ../downloads/music.mp3 (This file is in the "downloads" 
    folder, one level up from the current directory)

Absolute path: Starts with "/", tells the exact location from the 
    root directory. Think full address.
    Example: /home/user/documents/report.pdf (This file is in the 
    "documents" folder inside the user's home directory)

Very basic commands:

1. pwd

2. ls

3. ls -1
    - lists one file per line

4. ls -l
    - lists one file per line with details

5. cd

6. cd ..

lesson 17 - Manipulating Files and Directories

1. cd ~
    - takes you to the home directory
2. mv

3. touch hello.txt
    - to create a file in txt. touch command is used to create files 
    and mkdir to create directories.

4. rm
    - removes file/files (deletes)

5. rm -r
    - removes directories '-r' stands for recursive which means all 
    its content also.

6. mkdir

lesson17 - Editing and Viewing files

 



